
declare module "canto34" {
   /** Declaration file generated by dts-gen */

export class Lexer {
    constructor(options: any);

    addTokenType(tokenType: any): void;

    tokenize(content: any): any;

}

export class LineTracker {
    constructor();

    consume(content: any): void;

}

export interface Token {
	content: string,
	type: string,
	line: number,
	character: number
}

export class Parser {
    public tokens:Token[];
    constructor();

    eof(): boolean;

    expectEof(): void;

    initialize(tokens: Token[]): void;

    la1(tokenType: string): boolean;

    match(tokenType: string): boolean;

}





export function StandardTokenTypes(): void;


export namespace LexerException {
    const stackTraceLimit: number;

    function captureStackTrace(p0: any, p1: any): any;

    namespace prototype {
        const message: string;

        const name: string;

        function toString(): any;

    }

}


export class ParserException {
     constructor (message: any);
     message:string;

}


export class PatternDefinitionException {
    constructor (message: any);

}


export namespace StandardTokenTypes {
    const prototype: {
    };

    function JsonString(): any;

    function closeBracket(): any;

    function closeParen(): any;

    function closeSquareBracket(): any;

    function colon(): any;

    function comma(): any;

    function constant(literal: any, name: any, role: any): any;

    function floatingPoint(): any;

    function integer(): any;

    function openBracket(): any;

    function openParen(): any;

    function openSquareBracket(): any;

    function period(): any;

    function real(): any;

    function star(): any;

    function whitespace(): any;

    function whitespaceWithNewlines(): any;

    namespace JsonString {
        const prototype: {
        };

    }

    namespace closeBracket {
        const prototype: {
        };

    }

    namespace closeParen {
        const prototype: {
        };

    }

    namespace closeSquareBracket {
        const prototype: {
        };

    }

    namespace colon {
        const prototype: {
        };

    }

    namespace comma {
        const prototype: {
        };

    }

    namespace constant {
        const prototype: {
        };

    }

    namespace floatingPoint {
        const prototype: {
        };

    }

    namespace integer {
        const prototype: {
        };

    }

    namespace openBracket {
        const prototype: {
        };

    }

    namespace openParen {
        const prototype: {
        };

    }

    namespace openSquareBracket {
        const prototype: {
        };

    }

    namespace period {
        const prototype: {
        };

    }

    namespace real {
        const prototype: {
        };

    }

    namespace star {
        const prototype: {
        };

    }

    namespace whitespace {
        const prototype: {
        };

    }

    namespace whitespaceWithNewlines {
        const prototype: {
        };

    }

}


    

}